pipeline {
    agent any
     tools {
      jdk 'java17'
    }
    parameters {
      choice(name: 'ExecutionType', choices: ['single','all', 'parallel'], description: '')
      booleanParam(name: 'Parallel', defaultValue: false, description: '')
      choice(name: 'Project', choices: ['ardor', 'audit', 'babou', 'bloom', 'eros', 'gaia', 'hyperion', 'login','janus', 'kratos', 'mars', 'mercury', 'neptune', 'phobos', 'rosetta', 'segment', 'semaphore','tailor', 'vesta', 'vulcan','sirius', 'zeal'], description: '')
    }
    stages {
      stage('Clean Workspace'){
        steps {
          cleanWs()
        }
      }
      stage ('Checkout') {
        steps {
          checkout scm
        }
      }
      stage('Install Newman') {
        steps {
          bat "npm install newman"
          bat "npx newman -v"
          bat "npm install newman-reporter-allure"
        }
      }
      stage('Testing...'){
          steps {
              script {                       
                if ('all' in "${ExecutionType}") {
                      def tests = [:]
                      for (f in findFiles(glob: '**postman/*/*.json')) {
                          def n = "${f}".replaceAll("\\\\", " ")
                          stage(n[8..13]) {
                          tests["${f}"] = {
                                      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                      bat "npx newman run ${f} --reporters cli,allure --reporter-allure-export allure-results"
                                  }
                              }
                          }
                      }
                       if ('Parallel'==true) {
                      parallel tests
                      }
                  }
                  if('single' in "${ExecutionType}") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        bat "npx newman run postman/${Project}API/${Project}Api.postman_collection.json --reporters cli,allure --reporter-allure-export allure-results"
                        }
                  }
              }
          }
      }
      stage('Allure Report') {
        steps {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            allure includeProperties: false, jdk: 'java17', report: 'reports/allure-report', results: [[path: 'allure-results']]
            }
          }
        }
      }
    }
