pipeline {
    agent any
     tools {
      jdk 'java17'
    }
    parameters {
      choice(name: 'project', choices: ['bloom', 'login', 'ardor', 'babou', 'eros', 'mars', 'mercury', 'rosetta', 'segment', 'vesta', 'all'], description: '')
    }
    stages {
      stage('Clean Workspace'){
        steps {
          cleanWs()
        }
      }
      stage ('Checkout') {
        steps {
          checkout scm
        }
      }
      stage('Install Newman') {
        steps {
          bat "npm install newman"
          bat "npx newman -v"
          bat "npm install newman-reporter-allure"
          bat "npm install newman-reporter-htmlextra"
        }
      }
      stage('Testing...'){
          steps {
              script {
                  if ('all' in "${project}") {
                      def tests = [:]
                      for (f in findFiles(glob: '**postman/*/*.json')) {
                          def n = "${f}"
                          def v = n.replaceAll("\\\\", " ")
                          echo v[(v.length 1)ã€‘
             
                          stage("${f}") {
                          tests["${f}"] = {
                                      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                      bat "npx newman run ${f} --reporters cli,allure,htmlextra --reporter-allure-export allure-results --reporter-htmlextra-export reports/${f}.html"
                                  }
                              }
                          }
                      }
                      parallel tests
                  }
                  else{
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        bat "npx newman run postman/${project}API/${project}Api.postman_collection.json --reporters cli,allure,htmlextra --reporter-allure-export allure-results --reporter-htmlextra-export reports/${project}.html"
                        }
                  }
              }
          }
      }
      stage('Allure Report') {
        steps {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            allure includeProperties: false, jdk: 'java17', report: 'reports/allure-report', results: [[path: 'allure-results']]
            }
          }
        }
      }
    }
